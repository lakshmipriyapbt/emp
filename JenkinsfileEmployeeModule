
def COLOR_MAP = [
    'SUCCESS' : 'good' ,
    'FAILURE' : 'danger'
]
pipeline {
    agent any
    tools {
        maven 'maven'
        gradle 'gradle8'
        nodejs 'node18'
        jdk     'jdk21'
    }
    environment {
        EMPLOYEE_BUILD = "false"
        IDENTITY_BUILD = "false"
        UI_BUILD = "false"
    }
    stages {
        stage('Check Changes') {
            steps {
                script {
                    def changeLogSets = currentBuild.changeSets
                    for (changeLogSet in changeLogSets) {
                        for (entry in changeLogSet.items) {
                            echo "Commit: ${entry.commitId} by ${entry.author}"
                            echo "Message: ${entry.msg}"
                            for (file in entry.affectedFiles) {
                                echo "Affected file: ${file.path}"
                            }
                        }
                    }
                }
            }
        }

        stage('Build Employee') {   
            steps {
                script {
                EMPLOYEE_BUILD = "true"
            }
                    dir('employee') {
                    sh 'gradle clean build'
                    }
            }
        }
        stage('Package Employee') {
          
            steps {
                dir('employee') {
                    sh 'gradle assemble'
                }
            }
        }
        stage('Sonarqube Analysis - Employee') {
       
            environment {
                scannerHome = tool 'sonar6.0'
            }
            steps {
                withSonarQubeEnv('sonar') {
                    sh """${scannerHome}/bin/sonar-scanner \
                    -Dsonar.projectKey=EMS_EMPLOYEE \
                    -Dsonar.projectName=EMS_EMPLOYEE \
                    -Dsonar.projectVersion=1.0 \
                    -Dsonar.sources=employee/src \
                    -Dsonar.exclusions='**/*.spec.js, **/*.test.js' \
                    -Dsonar.sourceEncoding=UTF-8 \
                    -Dsonar.java.binaries=employee/build/classes/java/main/com/pb/employee
                    """
                }
            }
        }
        stage('Quality Gate - Employee') {
          
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    waitForQualityGate abortPipeline: false
                }
            }
        }
        stage('Upload Artifact - Identity') {
           
            steps {
                script {
                    
                    nexusArtifactUploader(
                       nexusVersion: 'nexus3',
                        protocol: 'http',
                        nexusUrl: '122.175.43.71:9001/',
                        groupId: 'QA',
                        version: "${env.BUILD_ID}-${env.BUILD_TIMESTAMP}",
                        repository: 'EMS_EMPLOYEE/',
                        credentialsId: 'nexuslogin',
                        artifacts: [
                            [artifactId: 'ems-be    ',
                            classifier: '',
                            file: 'identity/build/libs/employee-1.0.0.jar',
                            type: '.jar']    
                        ]
                    )
                }
            }
         
    }
    post {
            always {
                echo 'Slack Notificatons'
                slackSend channel : 'ems_ci-cd',
                    color: COLOR_MAP[currentBuild.currentResult], 
                    message: "*${currentBuild.currentResult}:* job ${env.job_Name} build ${env.BUIILD_NUMBER} \n More info at : ${env.BUILD_URL}" 
            }
        }
    }
}
